# ============================================================================
# Nginx 配置文件 - 土豆食堂项目（公网纯IP部署版本）
# ============================================================================
# 说明：此配置用于配合 Nginx Proxy Manager (NPM) 实现反向代理
# NPM 负责处理 HTTPS/SSL 证书，本配置只需监听 80 端口
# ============================================================================

server {
    # -------------------------------------------------------------------------
    # 基础服务配置
    # -------------------------------------------------------------------------
    
    # 只监听 80 端口（HTTP）
    # 由 NPM 负责 443 端口的 HTTPS 处理，并将请求转发到这里
    listen 80 default_server;
    
    # Laravel 应用的根目录（public 目录）
    # 所有静态文件和 PHP 入口文件都在此目录下
    root /var/www/public;

    # -------------------------------------------------------------------------
    # 安全响应头配置
    # -------------------------------------------------------------------------
    
    # X-Frame-Options: 防止网站被嵌入到 iframe 中，避免点击劫持攻击
    # SAMEORIGIN 表示只允许同源网站嵌入
    add_header X-Frame-Options "SAMEORIGIN";
    
    # X-Content-Type-Options: 禁止浏览器进行 MIME 类型嗅探
    # 防止浏览器将非可执行的 MIME 类型解释为可执行内容
    add_header X-Content-Type-Options "nosniff";

    # -------------------------------------------------------------------------
    # 默认页面配置
    # -------------------------------------------------------------------------
    
    # 默认首页文件
    index index.php;

    # 默认字符集为 UTF-8
    charset utf-8;

    # 关闭绝对路径重定向
    # 使 Laravel 重定向时使用相对路径，避免因端口不匹配导致的重定向问题
    absolute_redirect off;

    # -------------------------------------------------------------------------
    # 主路由处理（Laravel 应用入口）
    # -------------------------------------------------------------------------
    
    location / {
        # 按顺序尝试：
        # 1. 直接访问文件 $uri
        # 2. 访问目录 $uri/
        # 3. 如果都不存在，则通过 index.php 处理（Laravel 路由）
        try_files $uri $uri/ /index.php?$query_string;
    }

    # -------------------------------------------------------------------------
    # 特殊文件处理（不记录日志）
    # -------------------------------------------------------------------------
    
    # favicon.ico 网站图标文件
    # 不记录访问日志和未找到日志，减少日志噪音
    location = /favicon.ico { 
        access_log off; 
        log_not_found off; 
    }
    
    # robots.txt 搜索引擎爬虫规则文件
    # 不记录访问日志和未找到日志
    location = /robots.txt  { 
        access_log off; 
        log_not_found off; 
    }

    # -------------------------------------------------------------------------
    # 静态资源缓存配置 - 图片文件
    # -------------------------------------------------------------------------
    
    # 匹配图片文件：gif、jpg、jpeg、png、bmp、swf
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
        # 浏览器缓存 30 天
        # 减少服务器负载，提升用户访问速度
        expires      30d;
        
        # 不记录错误日志和访问日志
        error_log /dev/null;
        access_log /dev/null;
    }

    # -------------------------------------------------------------------------
    # 静态资源缓存配置 - JS/CSS 文件
    # -------------------------------------------------------------------------
    
    # 匹配 JavaScript 和 CSS 文件
    location ~ .*\.(js|css)?$
    {
        # 浏览器缓存 12 小时
        # 前端资源更新频率较高，缓存时间相对较短
        expires      12h;
        
        # 不记录错误日志和访问日志
        error_log /dev/null;
        access_log /dev/null;
    }
    
    # -------------------------------------------------------------------------
    # Livewire 特殊文件处理（不缓存）
    # -------------------------------------------------------------------------
    
    # Livewire 核心 JS 文件（未压缩版）
    # 禁用缓存，确保实时获取最新版本
    location = /livewire/livewire.js {
        expires off;
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    # Livewire 核心 JS 文件（压缩版）
    # 禁用缓存，确保实时获取最新版本
    location = /livewire/livewire.min.js {
        expires off;
        try_files $uri $uri/ /index.php?$query_string;
    }

    # -------------------------------------------------------------------------
    # 404 错误处理
    # -------------------------------------------------------------------------
    
    # 所有 404 错误都由 Laravel 的 index.php 处理
    # Laravel 会根据路由配置返回相应的 404 页面
    error_page 404 /index.php;

    # -------------------------------------------------------------------------
    # PHP 文件处理配置（FastCGI）
    # -------------------------------------------------------------------------
    
    # 匹配所有 .php 结尾的文件
    location ~ \.php$ {
        # 确保 PHP 文件存在，不存在则返回 404
        try_files $uri =404;
        
        # 分割 PHP 脚本路径和额外的路径信息
        # 例如：/test.php/foo/bar 会被分割为 /test.php 和 /foo/bar
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        
        # FastCGI 服务器地址
        # app:9000 指向 Docker Compose 中的 PHP-FPM 容器
        fastcgi_pass app:9000;
        
        # 默认的索引文件
        fastcgi_index index.php;
        
        # 包含 FastCGI 标准参数配置
        include fastcgi_params;
        
        # 设置 PHP 脚本的完整文件系统路径
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        
        # 传递路径信息给 PHP（用于 RESTful URL）
        fastcgi_param PATH_INFO $fastcgi_path_info;

        # =====================================================================
        # 反向代理头部传递配置（用于 NPM 部署）
        # =====================================================================
        # 说明：当使用 Nginx Proxy Manager 作为前端代理时
        # NPM 会在请求中添加 X-Forwarded-* 头部，包含原始请求的信息
        # 这些头部需要传递给 PHP-FPM，以便 Laravel 能够正确识别：
        # - 客户端真实 IP 地址
        # - 原始协议（HTTP/HTTPS）
        # - 原始域名
        # - 原始端口号
        # =====================================================================
        
        # 客户端真实 IP 地址
        # Laravel 通过此参数获取用户的真实 IP，而不是代理服务器的 IP
        fastcgi_param HTTP_X_FORWARDED_FOR $http_x_forwarded_for;
        
        # 原始请求协议（http 或 https）
        # Laravel 通过此参数判断用户使用的是 HTTP 还是 HTTPS
        # 这对 asset() 函数生成正确的资源 URL 非常重要
        fastcgi_param HTTP_X_FORWARDED_PROTO $http_x_forwarded_proto;
        
        # 原始请求的域名
        # Laravel 通过此参数获取用户访问的域名
        fastcgi_param HTTP_X_FORWARDED_HOST $http_x_forwarded_host;
        
        # 原始请求的端口号
        # Laravel 通过此参数获取用户访问的端口
        fastcgi_param HTTP_X_FORWARDED_PORT $http_x_forwarded_port;

        # =====================================================================
        # 端口号动态修正逻辑
        # =====================================================================
        # 问题：NPM 转发 HTTPS 请求时，可能传递错误的端口号
        # 解决：当检测到协议为 HTTPS 时，强制将端口设置为 443
        #      否则保留上游传递的端口号
        # 目的：确保 Laravel 生成的 URL 中包含正确的端口号
        # =====================================================================
        set $real_port $http_x_forwarded_port;
        if ($http_x_forwarded_proto = "https") {
            set $real_port "443";
        }
        fastcgi_param HTTP_X_FORWARDED_PORT $real_port;
    }

    # -------------------------------------------------------------------------
    # 隐藏文件保护
    # -------------------------------------------------------------------------

    # 禁止访问所有以点开头的隐藏文件和目录
    # 例如：.env、.git、.htaccess 等敏感文件
    # 但允许访问 .well-known 目录（用于 SSL 证书验证等）
    location ~ /\.(?!well-known).* {
        deny all;
    }
}
